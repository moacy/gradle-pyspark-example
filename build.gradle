task setupPython(type: Exec, dependsOn: downloadMinicondaInstaller) {
    doFirst {
        def os = System.getProperty('os.name').replaceAll(' ', '')
        file(buildDir).mkdirs()
        ant.get(
            src: "http://repo.continuum.io/miniconda/Miniconda-3.10.1-$os-x86_64.sh",
            dest: "$buildDir/installer.sh",
            usetimestamp: true
        )
    }
    onlyIf { !file("$buildDir/python").exists() }
    commandLine "bash", "$buildDir/installer.sh", "-b", "-p", "$buildDir/python"
}

task setupEnvironment(type: Exec, dependsOn: setupPython) {
    commandLine "$buildDir/python/bin/conda", "install", "--yes", "--quiet",
    	"ipython-notebook",
	"matplotlib",
	"pandas",
	"pylint",
	"pytest",
	"seaborn"
	"scikit-learn"
}

task setupSpark {
    onlyIf { !file("$buildDir/spark").exists() }
    file(buildDir).mkdirs()
    ant.get(
        src: "http://mirrors.ibiblio.org/apache/spark/spark-1.3.1/spark-1.3.1-bin-hadoop2.4.tgz",
        dest: "$buildDir/spark.tgz",
        usetimestamp: true
    )
    copy {
        from tarTree("$buildDir/spark.tgz")
        into "$buildDir/temp"
    }
    file("$buildDir/temp").listFiles().each { it.renameTo("$buildDir/spark") }
    file("$buildDir/temp").delete()
}

task test(type: Exec, dependsOn: setupEnvironment) {
    doFirst {
        file("$buildDir/reports/junit").mkdirs()
    }
    environment "PYSPARK_DRIVER_PYTHON", "$buildDir/python/bin/py.test"
    environment "PYSPARK_DRIVER_PYTHON_OPTS", "artichoke tests --doctest-modules --verbose --color=yes"
    environment "PYSPARK_PYTHON", "$buildDir/python/bin/python"
    environment "SPARK_CONF_DIR", "$projectDir/conf"
    commandLine "$buildDir/spark/bin/pyspark"
}
